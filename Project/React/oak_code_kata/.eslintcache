[{"D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\index.js":"1","D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\App\\App.js":"2","D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\CardList\\CardList.js":"3","D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\WizardForm\\WizardForm.js":"4"},{"size":546,"mtime":1606688716646,"results":"5","hashOfConfig":"6"},{"size":171,"mtime":1606673797774,"results":"7","hashOfConfig":"6"},{"size":1774,"mtime":1606688654199,"results":"8","hashOfConfig":"6"},{"size":4038,"mtime":1606794072940,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yjgy9f",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\index.js",[],"D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\App\\App.js",[],"D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\CardList\\CardList.js",["20"],"import React from 'react';\r\n\r\nclass CardList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      \"How To: React Form\": {\r\n        src: \"https://dummyimage.com/600x300/000000/fff.png\",\r\n        header: \"How To Make Interactive ReactJS Form\",\r\n        sub: \"Let's write some interactive form with React\"\r\n      },\r\n      \"Babel Intro\": {\r\n        src: \"https://dummyimage.com/600x300/000000/fff.png\",\r\n        header: \"Babelify your JavaScript code\",\r\n        sub: \"Babel make JavaScript code browser-compatible\"\r\n      },\r\n      \"JavaScript Basics\": {\r\n        src: \"https://dummyimage.com/600x300/000000/fff.png\",\r\n        header: \"JavaScript Basics Before You Learn React\",\r\n        sub: \"Learn the prerequisites of learning React fast\"\r\n      }\r\n    };\r\n    this.cards = this.cards.bind(this);\r\n  }\r\n\r\n  cards() {\r\n    let listOfCard = [];\r\n    for (let article in this.state) {\r\n      listOfCard.push(\r\n        <CardItem src={this.state[article].src} header={this.state[article].header} sub={this.state[article].sub}/>\r\n      );\r\n    }\r\n    return listOfCard;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row row-cols-1 row-cols-md-3\">\r\n        {this.cards()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass CardItem extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col mb-4\">\r\n        <div className='card' style={{ width: '26rem' }}>\r\n          <img src={this.props.src} className=\"card-img-top\" alt={this.props} />\r\n          <div className=\"card-body\">\r\n            <h5>{this.props.header}</h5>\r\n            <p>{this.props.sub}</p>\r\n            <a href=\"#\" className=\"btn btn-primary\">Learn more</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CardList;","D:\\GitHub\\OakCodeKata_codecamp_-6-1\\Project\\React\\oak_code_kata\\src\\components\\WizardForm\\WizardForm.js",["21"],"import React from 'react';\r\n\r\nclass WizardForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentStep: 1,\r\n      emailAddress: 'a',\r\n      username: 'b',\r\n      password: 'c'\r\n    }\r\n    this.changeEmail = this.changeEmail.bind(this);\r\n    this.changeUser = this.changeUser.bind(this);\r\n    this.changePassword = this.changePassword.bind(this);\r\n    this.prev = this.prev.bind(this);\r\n    this.next = this.next.bind(this);\r\n    this.buttonDisable = this.buttonDisable.bind(this);\r\n  }\r\n\r\n  changeEmail(event) {\r\n    this.setState({ emailAddress: event });\r\n  }\r\n\r\n  changeUser(event) {\r\n    this.setState({ username: event });\r\n  }\r\n\r\n  changePassword(event) {\r\n    this.setState({ password: event });\r\n  }\r\n\r\n  prev() {\r\n    let current = this.state.currentStep;\r\n    console.log(current);\r\n    current = current <= 1 ? 1 : current - 1;\r\n    this.setState({ currentStep: current });\r\n  }\r\n  next() {\r\n    let current = this.state.currentStep;\r\n    console.log(current);\r\n    current = current >= 2 ? 3 : current + 1;\r\n    this.setState({ currentStep: current });\r\n  }\r\n\r\n  renderStep() {\r\n    let current = this.state.currentStep;\r\n    if (current === 1) {\r\n      return <Step1 changeEmail={this.changeEmail} />;\r\n    } else if (current === 2) {\r\n      return <Step2 changeUser={this.changeUser} />;\r\n    } else if (current === 3) {\r\n      return <Step3 changePassword={this.changePassword} />;\r\n    }\r\n    return this.renderSubmit();\r\n  }\r\n\r\n  buttonDisable() {\r\n    let current = this.state.currentStep;\r\n    let stateArr = this.state.currentStep;\r\n    console.log(stateArr);\r\n    return Object.keys(stateArr)[current].length < 1;\r\n  }\r\n\r\n  handlerSubmit() {\r\n    let current = this.state.currentStep;\r\n    if (current > 3) {\r\n      alert(\r\n        `Your registration detail: \\n \r\n        Email: ${this.email} \\n \r\n        Username: ${this.username} \\n\r\n        Password: ${this.password}`\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <h2>{this.state[1]}</h2>\r\n          <h1>React Wizard Form</h1>\r\n          <p>Step {this.state.currentStep}</p>\r\n          {this.renderStep()}\r\n          <Button currentStep={this.state.currentStep} next={this.next} prev={this.prev} disabled={this.buttonDisable}/>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Step1 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='inputEmail'>Email address</label>\r\n        <input type='email' className=\"form-control\" id='inputEmail' placeholder='Enter email' onChange={this.changeEmail} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Step2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='inputUsername'>Username</label>\r\n        <input type='text' className=\"form-control\" id='inputUsername' placeholder='Enter username' onChange={this.changeUser} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Step3 extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label htmlFor='inputPassword'>Password</label>\r\n        <input type='password' className=\"form-control\" id='inputPassword' placeholder='Enter password' onChange={this.changePassword} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Button extends React.Component {\r\n  nextButton() {\r\n    let current = this.props.currentStep;\r\n    if (current < 4) {\r\n      return (\r\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={this.props.next} disabled={this.props.disabled}>\r\n          Next\r\n        </button>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  prevButton() {\r\n    let current = this.props.currentStep;\r\n    if (current !== 1) {\r\n      return (\r\n        <a className=\"btn btn-primary\" role=\"button\" onClick={this.props.prev}>\r\n          Previous\r\n        </a>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.prevButton()}\r\n        {this.nextButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default WizardForm;",{"ruleId":"22","severity":1,"message":"23","line":55,"column":13,"nodeType":"24","endLine":55,"endColumn":53},{"ruleId":"22","severity":1,"message":"25","line":143,"column":9,"nodeType":"24","endLine":143,"endColumn":80},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]